{{ 'services.css' | asset_url | stylesheet_tag }}

<section class="frame">
  <legend class="form__label">
    <span>{{ 'studio.stringing.form_labels.frame' | t }}</span>
  </legend>
  <label class="frame-option sheet" for="unstrung">
    <input checked type="radio" name="frame" id="unstrung">
    <span class="frame-name">{{ 'studio.stringing.form_labels.unstrung' | t }}</span>
    <span class="frame-description">
      {{ 'studio.stringing.description.unstrung' | t }}
    </span>
  </label>
  <label class="frame-option sheet" for="pro-stringing">
    <input type="radio" name="frame" id="pro-stringing">
    <div class="frame-name" style="display: flex; justify-content: space-between; align-items: center;">
      <span>{{ 'studio.stringing.form_labels.pro_stringing' | t }}</span>
      <span style="color: var(--gray-50); font-size: 1.3rem;">
        {%- if all_products['studio-pro-stringing'].price == 0 -%}
          FREE
        {%- else -%}
          {{ all_products['studio-pro-stringing'].price | money }}
        {%- endif -%}
      </span>
    </div>
    <span class="frame-description">
      {{ 'studio.stringing.description.pro_stringing' | t }}
    </span>
  </label>

  <section
    id="stringing-root"
    style="display: none;"
    data-stringing-collection-id="{{ settings.stringing_collection_id | default: '' }}"
    data-max-tension="{{product.metafields.custom.maximum_racket_tension}}"
  ></section>
</section>

<script defer="defer">
  document.addEventListener('DOMContentLoaded', () => {
    const root = document.getElementById('stringing-root');
    const proStringing = document.getElementById('pro-stringing');
    let scriptLoaded = false;
    let scriptLoading = false;

    // Function to load the script
    const loadScript = () => {
      if (scriptLoaded || scriptLoading) return;

      scriptLoading = true;
      const script = document.createElement('script');
      script.src = "{{ 'vx-stringing.js' | asset_url }}";
      script.defer = true;
      script.type = 'module';

      script.onload = () => {
        scriptLoaded = true;
        scriptLoading = false;
      };

      script.onerror = () => {
        scriptLoading = false;
        root.innerHTML = 'Failed to load stringing options. Please refresh the page.';
      };

      document.body.appendChild(script);
    };

    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => loadScript(), { timeout: 4000 });
    } else {
      setTimeout(loadScript, 2000);
    }

    document.querySelector('.frame').addEventListener('change', (e) => {
      if (e.target.name === 'frame') {
        root.style.display = e.target.id === 'pro-stringing' ? 'block' : 'none';

        if (e.target.id === 'pro-stringing') {
        document.getElementsByClassName('product-form__submit button')[0]?.classList?.add('glowing');
          loadScript();
            setTimeout(() => {
                window.scrollBy({
                top: 222,
                left: 0,
                behavior: 'smooth'
            });
          }, 300)
        } else {
          document.getElementsByClassName('product-form__submit button')[0]?.classList?.remove('glowing');
        }
      }
    });
  });

    // set the stringing variant id on window
      window.s3_stringing_service_variant_id = '{{ all_products['studio-pro-stringing'].variants.first.id  }}';
</script>
