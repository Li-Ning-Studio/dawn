<section class="frame">
  <legend class="form__label">
    <span>{{ 'studio.stringing.form_labels.frame' | t }}</span>
  </legend>
  <label class="frame-option sheet" for="unstrung">
    <input checked type="radio" name="frame" id="unstrung">
    <span class="frame-name">{{ 'studio.stringing.form_labels.unstrung' | t }}</span>
    <span class="frame-description">
      {{ 'studio.stringing.description.unstrung' | t }}
    </span>
  </label>
  <label class="frame-option sheet" for="pro-stringing">
    <input type="radio" name="frame" id="pro-stringing">
    <div class="frame-name" style="display: flex; justify-content: space-between; align-items: center;">
      <span>{{ 'studio.stringing.form_labels.pro_stringing' | t }}</span>
      <span style="color: var(--gray-50); font-size: 1.3rem;">
        {{- all_products['studio-pro-stringing'].price | money -}}
      </span>
    </div>
    <span class="frame-description">
      {{ 'studio.stringing.description.pro_stringing' | t }}
    </span>
  </label>

  <section
    id="stringing-root"
    style="display: none;"
    data-stringing-collection-id="{{ settings.stringing_collection_id | default: '' }}"
  ></section>
</section>

<style>
  .frame-name {
    color: black;
    font-weight: 500;
    letter-spacing: 0px;
  }

  .frame-option {
    border: 2px solid transparent;
    display: block;
    width: 100%;
    padding: 1.3rem 1.3rem;
    margin-bottom: 1.4rem;
  }

  .frame-description {
    display: block;
    font-size: 1.4rem;
    letter-spacing: 0.2px;
    line-height: 1.5;
    color: var(--gray-50);
  }

  input[type='radio'] {
    opacity: 0;
    position: absolute;
  }

  .frame-option:has(input[name='frame']:checked) {
    border: 2px solid var(--accent-color);
  }
</style>

<script defer="defer">
  document.addEventListener('DOMContentLoaded', () => {
    const root = document.getElementById('stringing-root');
    const proStringing = document.getElementById('pro-stringing');
    let scriptLoaded = false;
    let stringingInstance = null;

    // Handle radio changes
    document.querySelector('.frame').addEventListener('change', (e) => {
      if (e.target.name === 'frame') {
        root.style.display = e.target.id === 'pro-stringing' ? 'block' : 'none';

        if (e.target.id === 'pro-stringing' && !scriptLoaded) {
          loadStringingScript();
        }
      }
    });

    // Load stringing script
    async function loadStringingScript() {
      try {
        const script = document.createElement('script');
        script.src = "{{ 'vx-stringing.js' | asset_url }}";
        script.defer = true;
        script.type = 'module';

        await script.addEventListener('load', () => {
          scriptLoaded = true;
        });

        document.body.appendChild(script);
      } catch (error) {
        console.error('Stringing script load failed:', error);
        root.innerHTML = 'Failed to load stringing options. Please refresh the page.';
      }
    }

    // Initialize if pro-stringing is checked
    if (proStringing.checked) {
      loadStringingScript();
      root.style.display = 'block';
    }
  });
</script>
